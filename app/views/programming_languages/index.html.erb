<h1>Programming Languages</h1>

<%= form_tag programming_languages_path, method: :get, class: "container-fluid" do %>
  <div class="input-group">
    <%= text_field_tag :search, params[:search], class: 'form-control' %>
    <span class="input-group-btn">
      <%= submit_tag 'Search', class: "btn btn-default" %>
    </span>
  </div>
<% end %>

<p style="margin-top: 10px">
  <b>Tips:</b>
  <ul class="list-group">
    <li class="list-group-item">
      To exclude something from the result use two hyphen symbols.
      For example, the  <i>--array</i> flag will exclude all records with category <i>Array</i>.
    </li>
    <li class="list-group-item">
      To find a case-sensitive, order-important and not full-word match enter your query between double-quotes.
      It works by the include principle. For example, <i>"John Plevyak"</i> will return <i>Chapel</i> language.
    </li>
    <li class="list-group-item">
      To do the whole-word-match and non-case-sensitive search just enters your query in the input field.
      For example, <i>Microsoft scripting</i> will return all scripting languages developed by Microsoft.
    </li>
    <li class="list-group-item">
      Also, you can combine.
      For example, <i>Microsoft --scripting</i> will return all non-scripting languages developed by Microsoft.
    </li>
    <li class="list-group-item">
      A record will be returned only if it matches all tokens you entered into the search input. For example, it doesn't
      matter if we write `Interpreted "Thomas Eugene"` or `Interpreted Thomas Eugene`. Let's look deeper at these two
      cases:
      `Interpreted "Thomas Eugene"' has two tokens: Interpreted (regular token) and "Thomas Eugene" (exact match token).
      Firstly, the search module will exclude all record which doesn't have any mentioned about 'Interpreted' word (this
      match is non-case sensitive and whole-word, so for example, if we write 'Interpret' instead of 'Interpreted' then
      the search will return nothing). Secondly, the search will exclude all record which doesn't have any mentioned
      about "Thomas Eugene". Search will be finding records' fields that include "Thomas Eugene" token (this match is
      case-sensitive and non-whole-word, so for example "Thomas eugene" is not equal to "Thomas Eugene" and for example
      "Thomas Eugen" token result is similar to"Thomas Eugene" token result.)
      `Interpreted "Thomas Eugene"' has three tokens: Interpreted, Thomas and Eugene (all them are regular token). All
      of them work the same way as the first token from the first case.
    </li>
    <li class="list-group-item">
      The search module will return all records if search input doesn't contain any letter or numbers ("", " ", ",,," "---  +").
    </li>
  </ul>
</p>

<table class="table table-hover table-bordered">
  <thead>
    <tr>
      <th>Name</th>
      <th>Categories</th>
      <th>Designed by</th>
      <th colspan="3">Actions</th>
    </tr>
  </thead>

  <tbody>
    <% @programming_languages.each do |programming_language| %>
      <tr>
        <td><%= programming_language.name %></td>
        <td><%= programming_language.categories %></td>
        <td><%= programming_language.designed_by %></td>
        <td><%= link_to 'Show', programming_language %></td>
        <td><%= link_to 'Edit', edit_programming_language_path(programming_language) %></td>
        <td><%= link_to 'Destroy', programming_language, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Programming Language', new_programming_language_path %>
